version: '3.8'

services:
  # PostgreSQL Database with pgvector
  postgres:
    image: pgvector/pgvector:pg15
    container_name: agenthq-postgres
    environment:
      POSTGRES_USER: agenthq
      POSTGRES_PASSWORD: agenthq_dev_password
      POSTGRES_DB: agenthq
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agenthq"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - agenthq

  # Redis Cache & Message Broker
  redis:
    image: redis:7-alpine
    container_name: agenthq-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - agenthq

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: agenthq-backend
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgresql+asyncpg://agenthq:agenthq_dev_password@postgres:5432/agenthq
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/2
      PYTHONUNBUFFERED: 1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - backend_cache:/root/.cache
    env_file:
      - ./backend/.env
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - agenthq

  # Celery Worker for Agent Tasks
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: agenthq-celery-worker
    environment:
      DATABASE_URL: postgresql+asyncpg://agenthq:agenthq_dev_password@postgres:5432/agenthq
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/2
      PYTHONUNBUFFERED: 1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - backend_cache:/root/.cache
    env_file:
      - ./backend/.env
    command: celery -A app.agents.celery_app worker --loglevel=info --concurrency=2
    networks:
      - agenthq

  # Celery Flower (Task Monitoring UI)
  celery-flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: agenthq-celery-flower
    ports:
      - "5555:5555"
    environment:
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/2
    depends_on:
      - redis
      - celery-worker
    env_file:
      - ./backend/.env
    command: celery -A app.agents.celery_app flower --port=5555
    networks:
      - agenthq

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_cache:
    driver: local

networks:
  agenthq:
    driver: bridge
